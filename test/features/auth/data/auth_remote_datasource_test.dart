import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:shop_trendy/features/auth/data/datasources/auth_remote_datasource_impl.dart';

import 'auth_remote_datasource_test.mocks.dart'; // Generated by build_runner

@GenerateMocks([
  firebase_auth.FirebaseAuth,
  firebase_auth.UserCredential,
  firebase_auth.User,
  // Mock GoogleSignInAuthentication
])
void main() {
  late AuthRemoteDataSourceImpl dataSource;
  late MockFirebaseAuth mockFirebaseAuth;
  late MockUserCredential mockUserCredential;
  late MockUser mockFirebaseUser;


  setUp(() {
    mockFirebaseAuth = MockFirebaseAuth();
    mockUserCredential = MockUserCredential();
    mockFirebaseUser = MockUser();

    when(mockUserCredential.user).thenReturn(mockFirebaseUser);

    dataSource = AuthRemoteDataSourceImpl(mockFirebaseAuth);
  });

  group('signInWithEmailPassword', () {
    const String tEmail = 'test@example.com';
    const String tPassword = 'password123';

    test(
        'should call FirebaseAuth.signInWithEmailAndPassword and return UserCredential',
            () async {
          when(mockFirebaseAuth.signInWithEmailAndPassword(
              email: tEmail, password: tPassword))
              .thenAnswer((_) async => mockUserCredential);

          final result =
          await dataSource.signInWithEmailPassword(tEmail, tPassword);

          expect(result, mockUserCredential);
          verify(mockFirebaseAuth.signInWithEmailAndPassword(
              email: tEmail, password: tPassword))
              .called(1);
        });

    test('should throw an exception when FirebaseAuth fails', () {
      when(mockFirebaseAuth.signInWithEmailAndPassword(
          email: tEmail, password: tPassword))
          .thenThrow(firebase_auth.FirebaseAuthException(code: 'user-not-found'));

      expect(
            () => dataSource.signInWithEmailPassword(tEmail, tPassword),
        throwsA(isA<Exception>()),
      );
      verify(mockFirebaseAuth.signInWithEmailAndPassword(
          email: tEmail, password: tPassword))
          .called(1);
    });
  });

  group('signUpWithEmailPassword', () {
    const String tEmail = 'test@example.com';
    const String tPassword = 'password123';

    test(
        'should call FirebaseAuth.createUserWithEmailAndPassword and return UserCredential',
            () async {
          when(mockFirebaseAuth.createUserWithEmailAndPassword(
              email: tEmail, password: tPassword))
              .thenAnswer((_) async => mockUserCredential);

          final result =
          await dataSource.signUpWithEmailPassword(tEmail, tPassword);

          expect(result, mockUserCredential);
          verify(mockFirebaseAuth.createUserWithEmailAndPassword(
              email: tEmail, password: tPassword))
              .called(1);
        });

    test('should throw an exception when FirebaseAuth fails', () {
      when(mockFirebaseAuth.createUserWithEmailAndPassword(
          email: tEmail, password: tPassword))
          .thenThrow(firebase_auth.FirebaseAuthException(code: 'weak-password'));

      expect(
            () => dataSource.signUpWithEmailPassword(tEmail, tPassword),
        throwsA(isA<Exception>()),
      );
      verify(mockFirebaseAuth.createUserWithEmailAndPassword(
          email: tEmail, password: tPassword))
          .called(1);
    });
  });

  group('signInWithEmailPassword', () {
    const String tEmail = 'test@example.com';
    const String tPassword = 'password123';

    test(
        'should call FirebaseAuth.signInWithEmailAndPassword and return UserCredential',
            () async {
          when(mockFirebaseAuth.signInWithEmailAndPassword(
              email: tEmail, password: tPassword))
              .thenAnswer((_) async => mockUserCredential);

          final result =
          await dataSource.signInWithEmailPassword(tEmail, tPassword);

          expect(result, mockUserCredential);
          verify(mockFirebaseAuth.signInWithEmailAndPassword(
              email: tEmail, password: tPassword))
              .called(1);
        });

    test('should throw an exception when FirebaseAuth fails', () {
      when(mockFirebaseAuth.signInWithEmailAndPassword(
          email: tEmail, password: tPassword))
          .thenThrow(firebase_auth.FirebaseAuthException(code: 'user-not-found'));

      expect(
            () => dataSource.signInWithEmailPassword(tEmail, tPassword),
        throwsA(isA<Exception>()),
      );
      verify(mockFirebaseAuth.signInWithEmailAndPassword(
          email: tEmail, password: tPassword))
          .called(1);
    });
  });

  group('signUpWithEmailPassword', () {
    const String tEmail = 'test@example.com';
    const String tPassword = 'password123';

    test(
        'should call FirebaseAuth.createUserWithEmailAndPassword and return UserCredential',
            () async {
          when(mockFirebaseAuth.createUserWithEmailAndPassword(
              email: tEmail, password: tPassword))
              .thenAnswer((_) async => mockUserCredential);

          final result =
          await dataSource.signUpWithEmailPassword(tEmail, tPassword);

          expect(result, mockUserCredential);
          verify(mockFirebaseAuth.createUserWithEmailAndPassword(
              email: tEmail, password: tPassword))
              .called(1);
        });

    test('should throw an exception when FirebaseAuth fails', () {
      when(mockFirebaseAuth.createUserWithEmailAndPassword(
          email: tEmail, password: tPassword))
          .thenThrow(firebase_auth.FirebaseAuthException(code: 'weak-password'));

      expect(
            () => dataSource.signUpWithEmailPassword(tEmail, tPassword),
        throwsA(isA<Exception>()),
      );
      verify(mockFirebaseAuth.createUserWithEmailAndPassword(
          email: tEmail, password: tPassword))
          .called(1);
    });
  });

  group('signOut', () {
    test('should call FirebaseAuth.signOut', () async {
      when(mockFirebaseAuth.signOut()).thenAnswer((_) async => Future.value());

      await dataSource.signOut();

      verify(mockFirebaseAuth.signOut()).called(1);
    });

    test('should throw an exception when FirebaseAuth signOut fails', () {
      when(mockFirebaseAuth.signOut())
          .thenThrow(firebase_auth.FirebaseAuthException(code: 'network-request-failed'));

      expect(
            () => dataSource.signOut(),
        throwsA(isA<Exception>()),
      );
      verify(mockFirebaseAuth.signOut()).called(1);
    });
  });

  group('authStateChanges', () {
    test('should return a stream of User updates', () async {
      final userStream = Stream.fromIterable([mockFirebaseUser, null]);
      when(mockFirebaseAuth.authStateChanges()).thenAnswer((_) => userStream);

      final resultStream = dataSource.authStateChanges;

      expect(await resultStream.first, mockFirebaseUser);
      expect(await resultStream.last, null); // Consume the stream
      verify(mockFirebaseAuth.authStateChanges()).called(1);
    });
  });
}
