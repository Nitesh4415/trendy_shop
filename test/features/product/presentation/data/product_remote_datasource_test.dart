import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:shop_trendy/core/constants/api_constants.dart';
import 'package:shop_trendy/core/error/exceptions.dart';
import 'package:shop_trendy/core/network/api_client.dart';
import 'package:shop_trendy/features/product/data/datasources/product_remote_datasource_impl.dart';
import 'package:shop_trendy/features/product/data/models/product_model.dart';

import 'product_remote_datasource_test.mocks.dart'; // Generated by build_runner

@GenerateMocks([ApiClient])
void main() {
  late ProductRemoteDataSourceImpl dataSource;
  late MockApiClient mockApiClient;

  setUp(() {
    mockApiClient = MockApiClient();
    dataSource = ProductRemoteDataSourceImpl(mockApiClient);
  });

  group('getAllProducts', () {
    final tProductJson = {
      'id': 1,
      'title': 'Test Product',
      'price': 10.0,
      'description': 'Desc',
      'category': 'Cat',
      'image': 'Img',
      'rating': {'rate': 4.0, 'count': 10},
    };
    final tProductModel = ProductModel.fromJson(tProductJson);
    final List<dynamic> tProductListJson = [tProductJson];

    test('should return List<ProductModel> when the call to API is successful', () async {
      when(mockApiClient.get(ApiConstants.products,
          queryParameters: {'limit': 1, 'sort': 'asc', 'skip': 0}))
          .thenAnswer((_) async => tProductListJson);

      final result = await dataSource.getAllProducts(limit: 1, sort: 'asc', skip: 0);

      expect(result, [tProductModel]);
      verify(mockApiClient.get(ApiConstants.products,
          queryParameters: {'limit': 1, 'sort': 'asc', 'skip': 0}))
          .called(1);
    });
  });

  group('getProductDetails', () {
    final tProductJson = {
      'id': 1,
      'title': 'Test Product',
      'price': 10.0,
      'description': 'Desc',
      'category': 'Cat',
      'image': 'Img',
      'rating': {'rate': 4.0, 'count': 10},
    };
    final tProductModel = ProductModel.fromJson(tProductJson);

    test('should return ProductModel when the call to API is successful', () async {
      when(mockApiClient.get('${ApiConstants.products}/1'))
          .thenAnswer((_) async => tProductJson);

      final result = await dataSource.getProductDetails(1);

      expect(result, tProductModel);
      verify(mockApiClient.get('${ApiConstants.products}/1')).called(1);
    });

    test('should throw a ServerException when the API call is unsuccessful', () {
      when(mockApiClient.get('${ApiConstants.products}/1'))
          .thenThrow(ServerException());

      expect(
            () => dataSource.getProductDetails(1),
        throwsA(isA<ServerException>()),
      );
      verify(mockApiClient.get('${ApiConstants.products}/1')).called(1);
    });
  });

  group('getProductsByCategory', () {
    final tProductJson = {
      'id': 1,
      'title': 'Test Product',
      'price': 10.0,
      'description': 'Desc',
      'category': 'electronics',
      'image': 'Img',
      'rating': {'rate': 4.0, 'count': 10},
    };
    final tProductModel = ProductModel.fromJson(tProductJson);
    final List<dynamic> tProductListJson = [tProductJson];
    const String tCategory = 'electronics';

    test('should return List<ProductModel> when the call to API is successful', () async {
      when(mockApiClient.get('${ApiConstants.products}/category/$tCategory'))
          .thenAnswer((_) async => tProductListJson);

      final result = await dataSource.getProductsByCategory(tCategory);

      expect(result, [tProductModel]);
      verify(mockApiClient.get('${ApiConstants.products}/category/$tCategory'))
          .called(1);
    });

    test('should throw a ServerException when the API call is unsuccessful', () {
      when(mockApiClient.get('${ApiConstants.products}/category/$tCategory'))
          .thenThrow(ServerException());

      expect(
            () => dataSource.getProductsByCategory(tCategory),
        throwsA(isA<ServerException>()),
      );
      verify(mockApiClient.get('${ApiConstants.products}/category/$tCategory'))
          .called(1);
    });
  });
}
